#pragma once
#include "Object3d.h"
#include "Collider.h"


class Stage
{
public:// メンバ関数
	Stage();
	~Stage();

	// 初期化
	void Initialize();

	// 更新処理
	void Update();

	// 描画処理
	void Draw(ViewProjection* viewProjection);

	// チュートリアルステージのセット
	void TutorialReset();

	// チュートリアルステージのポジションを作る
	void TutorialPosCreate();

	// チュートリアルステージのポジションのセット
	void TutorialPosSet();

	// ステージ１のセット
	void Stage1Reset();

	// ステージ2のセット
	void Stage2Reset();

	//ステージ3のセット
	void Stage3Reset();

	//アクセッサ
	Collider GetCollider(int num);
	int GetObjectcount();
	int GetMapNum(int x, int y, int z);
	int GetMap3Num(int x, int y, int z);
	WorldTransform GetWorldTransform(int num);
	Vector3 GetRadius();

private:// �����o�ϐ�
	//�}�b�v�z��̕ϐ�
	static const int mapNumX = 10;
	static const int mapNumZ = 10;

	Model* blockModel = nullptr;
	WorldTransform* stage0W[10][10];
	WorldTransform* stage1W[10][10];
	WorldTransform* stage2W[10][10];
	WorldTransform* stage3W[10][10];
	Object3d* stageBlock[500];
	Collider* collider_[500];

	//半径
	Vector3 radius_ = { 1,1,1 };

	// 必要なオブジェクトの個数のカウント
	int objectCount = 0;

	// ステージ構成
	
#pragma region Tutorial
	// ステージのゼロ段目(ダメージ床など特殊ギミック用)
	int zeroStage[10][10] = {
		{0,0,1,1,0,0,0,0,0,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,0,0,0,0,0,0,0,0,0},
	};

	// ステージの一段目
	int firstStage[10][10] = {
		{1,1,0,0,1,1,1,1,1,1},
		{1,1,0,0,0,0,0,0,1,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,1,0,0,0,0,0,0,0,1},
		{1,1,1,1,1,1,1,1,1,1},
	};
	// ステージの二段目
	int secondStage[10][10] = {
		{1,1,0,0,1,1,1,1,1,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,1,1,1,1,1,1,1,1,1},
	};
	// ステージの三段目
	int thirdStage[10][10] = {
		{1,1,1,1,1,1,1,1,1,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,1,1,1,1,1,1,1,1,1},
	};
#pragma endregion

#pragma region ステージ１
	int zeroStage1[mapNumX][mapNumZ]{
		{0,0,1,1,0,0,0,0,0,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,0,0,0,0,0,0,0,0,0},
	};
	int firstStage1[mapNumX][mapNumZ]{
		{1,1,0,0,1,1,1,1,1,1},
		{1,1,0,0,0,0,0,0,1,1},
		{1,1,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,1,1,1,0,0,0,1},
		{1,0,0,1,1,1,0,0,0,1},
		{1,1,1,1,1,1,1,1,1,1},
	};
	int secondStage1[mapNumX][mapNumZ]{
		{1,1,0,0,1,1,1,1,1,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,1,1,1,1,1,1,1,1,1},
	};
	int thirdStage1[mapNumX][mapNumZ]{
		{1,1,1,1,1,1,1,1,1,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,1,1,1,1,1,1,1,1,1},
	};

#pragma endregion

#pragma region ステージ2
	int zeroStage2[mapNumX][mapNumZ]{
		{0,0,1,1,0,0,0,0,0,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,0,0,0,0,0,0,0,0,0},
	};
	int firstStage2[mapNumX][mapNumZ]{
		{1,1,0,0,1,1,1,1,1,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,1,1,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,1,1,1,1,1,1,1,1,1},
	};
	int secondStage2[mapNumX][mapNumZ]{
		{1,1,0,0,1,1,1,1,1,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,1,1,1,1,1,1,1,1,1},
	};
	int thirdStage2[mapNumX][mapNumZ]{
		{1,1,1,1,1,1,1,1,1,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,1,1,1,1,1,1,1,1,1},
	};

#pragma endregion

#pragma region ステージ3
	int zeroStage3[mapNumX][mapNumZ]{
		{0,0,1,1,0,0,0,0,0,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,1,1,1,1,1,1,1,1,0},
		{0,0,0,0,0,0,0,0,0,0},
	};
	int firstStage3[mapNumX][mapNumZ]{
		{1,1,0,0,1,1,1,1,1,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,1,0,0,1,0,0,0,0,1},
		{1,1,0,0,1,1,0,0,1,1},
		{1,0,0,0,1,0,0,0,0,1},
		{1,0,0,0,1,0,0,0,0,1},
		{1,0,0,0,1,0,0,0,0,1},
		{1,1,1,1,1,1,1,1,1,1},
	};
	int secondStage3[mapNumX][mapNumZ]{
		{1,1,0,0,1,1,1,1,1,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,1,0,0,0,0,1},
		{1,0,0,0,1,1,0,0,1,1},
		{1,0,0,0,1,0,0,0,0,1},
		{1,0,0,0,1,0,0,0,0,1},
		{1,0,0,0,1,0,0,0,0,1},
		{1,1,1,1,1,1,1,1,1,1},
	};
	int thirdStage3[mapNumX][mapNumZ]{
		{1,1,1,1,1,1,1,1,1,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,0,0,0,0,0,0,0,0,1},
		{1,1,1,1,1,1,1,1,1,1},
	};

#pragma endregion


	//一個のブロックの半径
	float radius = 1.0f;

	// ダメージ床に必要なステータス

#pragma region damege
	//// 場所
	//WorldTransform* damegeW[10][10];

	//// 必要な分だけ生成するリスト
	//std::vector<GameObject3D*> damegeBlock;
	//
	//// 当たり判定のリスト
	//std::vector<Collider*>damegeCollider;
	//
	//// 必要な分の数
	//int damegeObjCount = 0;

#pragma endregion
};